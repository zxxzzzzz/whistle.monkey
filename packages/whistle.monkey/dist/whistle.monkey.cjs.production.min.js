"use strict";function e(e){return e&&"object"==typeof e&&"default"in e?e.default:e}Object.defineProperty(exports,"__esModule",{value:!0});var n=e(require("koa")),s=e(require("chokidar")),t=e(require("fs")),a=e(require("micromatch")),o=e(require("path")),r=e(require("js-yaml")),i=require("@zhangxin/mock-monkey-core"),c=e(require("findup-sync")),l=e(require("@koa/router")),u=e(require("@koa/cors")),p=e(require("koa-body")),d=e(require("koa-send")),g=require("ws");const f=new Map;function y(e,n){var s;if(!n)throw Error("rule不能为空");if(null==n||null==(s=n.request)||!s.url)throw Error("request的url不能为空");f.set(e,n)}function h(e,n){if(!n)throw Error("rule不能为空");const s=f.get(e);f.set(e,s?{...s,...n}:n)}function m(e){f.delete(e)}function x(e){const n=f.get(e);n&&(n.disabled=!0)}function b(e){const n=f.get(e);n&&(n.disabled=!1)}function w(e){return f.get(e)}function k(e){return a([...f.keys()],e)}async function $(e){const{_path:n,eventName:s}=e,a=o.parse(n);if(!["add","change"].includes(s))return"next";if(".yaml"!==a.ext)return"next";let i={request:{url:o.parse(n).name,body:{}},response:{body:{}}};const c=t.readFileSync(n,{encoding:"utf-8"});if(""!==c){try{const e=function(e,n){const s=e.replace(/\/\/[^\n\r]*/g,""),t=JSON.parse(s);return null!=t&&t.request?t:{...n,response:{body:t}}}(c,i);return void t.writeFileSync(n,r.dump(e),{encoding:"utf-8"})}catch(e){}try{return e.rule=r.load(c),"next"}catch(e){global.sendLog({message:`${n}文件有格式问题<span class="text-pink-500">${e.message}</span>`,type:"error",tags:["yaml","格式"]})}}else t.writeFileSync(n,r.dump({...i}),{encoding:"utf-8"})}async function q(e){const{_path:n,eventName:s}=e;if(".js"!==o.parse(n).ext||!["add","change"].includes(s))return"next";const t={add:"添加",change:"更新",unlinkDir:"",unlink:"",addDir:""};try{"change"===s&&delete require.cache[n];const e=require(n);Object.keys(e).forEach(n=>{i.addFunction(n,e[n])}),global.sendLog({message:`${t[s]}了函数<span class="text-pink-500">${n}</span>`,type:"success",tags:["添加","函数"]})}catch(e){global.sendLog({message:`${t[s]}函数<span class="text-pink-500">${n}</span>失败，${e.message}`,type:"success",tags:["添加","函数"]})}}function v(e,n){const s=c(".ignore",{cwd:e});let a=[];return s&&(a=t.readFileSync(s,{encoding:"utf-8"}).split("\n").filter(e=>!e.startsWith("// ")).map(e=>`${(""+o.parse(s.replace(/[\\]/g,"/")).dir).replace(n,"**")}/${e.replace(/[\s]*/g,"")}`)),a}async function S(e){const{_path:n,eventName:s,root:t}=e,r=o.parse(n);if(".yaml"!==r.ext)return"next";if("add"===s)try{y(n,{...e.rule,filePath:n,disabled:!1});const s=v(r.dir,t);if(a.isMatch(n,s))return x(n),void global.sendLog({message:`禁用了模板<span class="text-pink-500">${n}</span>`,type:"warning",tags:["禁用"]});global.sendLog({message:`添加了模板<span class="text-pink-500">${n}</span>`,type:"success",tags:["添加"]})}catch(e){global.sendLog({message:`添加模板<span class="text-pink-500">${n}</span>失败,${e.message}`,type:"error"})}if("change"===s)try{h(n,e.rule),global.sendLog({message:`更新了模板<span class="text-pink-500">${n}</span>`,type:"success",tags:["更新"]})}catch(e){global.sendLog({message:`更新模板<span class="text-pink-500">${n}</span>失败`,type:"error"})}"unlinkDir"===s&&k([n+"/*"]).forEach(e=>{m(e),global.sendLog({message:`删除了模板<span class="text-pink-500">${n}</span>`,type:"warning",tags:["禁用"]})}),"unlink"===s&&(m(n),global.sendLog({message:`删除了模板<span class="text-pink-500">${n}</span>`,type:"success",tags:["删除"]}))}async function L(e){const{_path:n,root:s}=e,t=o.parse(n);if(".ignore"===t.name){const e=v(t.dir,s);k(["**"]).forEach(n=>{const s=w(n);if(!0===(null==s?void 0:s.disabled)&&!a.isMatch(n,e))return b(n),void global.sendLog({message:`启用了模板<span class="text-pink-500">${n}</span>`,type:"success",tags:["启用"]});!1===(null==s?void 0:s.disabled)&&a.isMatch(n,e)&&(x(n),global.sendLog({message:`禁用了模板<span class="text-pink-500">${n}</span>`,type:"warning",tags:["禁用"]}))})}}let O;async function N(e){if(O&&await O.close(),!t.existsSync(e))throw Error("path not exist");O=s.watch(e).on("all",(n,s)=>{!async function(e,n){if(!e.length)return;const s=n;for(const n of e)if("next"!==await n(s))break}([$,q,S,L],{eventName:n,_path:s.replace(/[\\]/g,"/"),root:e.replace(/[\\]/g,"/"),content:""})})}function R(e,n,s,t){if("number"!=typeof(null==s?void 0:s.delay))return"next";{var a;const o=i.generate(null==s||null==(a=s.response)?void 0:a.body,t),r=new URL(e.url||"","http://"+e.headers.host),c=decodeURIComponent(e.originalReq.ruleValue);setTimeout(()=>{n.end(JSON.stringify(o),"utf-8"),global.sendLog({type:"success",message:`请求<span class="text-purple-500">${r.pathname}\n          </span>延迟${s.delay}ms, 命中文件<span class="text-pink-500">${c}</span>`,tags:["命中"]})},s.delay)}}function j(e,n){return n.setHeader("Access-Control-Allow-Credentials","true"),n.setHeader("Access-Control-Allow-Origin",e.headers.origin||""),n.setHeader("Content-Type","application/json"),"next"}function J(e,n,s,t){try{var a;!function(e,n,s){if(null==n)return!0;if(null==e)throw Error("入参不存在，但是却配置了入参验证, 所以请求失败");Object.keys(n).forEach(t=>{if(!1===function(e,n,s){const t=i.getValueByStatement(e,s);return"function"==typeof t&&t(n),n===t}(n[t],e[t],s))throw Error(`入参字段 ${t} 不符合判定规则`)})}(t,null==s||null==(a=s.request)?void 0:a.body,t)}catch(s){n.statusCode=400,n.statusMessage=s.message,n.end(JSON.stringify({code:400,message:s.message}),"utf-8");const t=decodeURIComponent(e.originalReq.ruleValue),a=new URL(e.url||"","http://"+e.headers.host);return void global.sendLog({type:"error",message:`请求<span class="text-purple-500">${a.pathname}</span>命中文件<span class="text-pink-500">${t}</span>,但是参数有问题`,tags:["命中","入参"]})}return"next"}function E(e,n,s,t){var a;const o=decodeURIComponent(e.originalReq.ruleValue);console.log(o,"file");const r=i.generate(null==s||null==(a=s.response)?void 0:a.body,t),c=new URL(e.url||"","http://"+e.headers.host);n.end(JSON.stringify(r),"utf-8"),global.sendLog({type:"success",message:`请求<span class="text-purple-500">${c.pathname}</span>命中文件<span class="text-pink-500">${o}</span>`,tags:["命中"]})}const C=new n,F=new l;F.post("/cgi-bin/root",async e=>{const n=e.request.body;if(!n.path)return e.response.status=500,void(e.response.message='do not find property "path"');try{const s=JSON.parse(t.readFileSync("./config.json",{encoding:"utf-8"}));s.root=n.path,t.writeFileSync("./config.json",JSON.stringify(s),{encoding:"utf-8"}),await N(n.path),e.response.status=200,e.response.body=JSON.stringify({path:n.path})}catch(n){e.response.status=500,e.response.message=n.message}}),F.get("/cgi-bin/root",async e=>{const{root:n}=JSON.parse(t.readFileSync("./config.json",{encoding:"utf-8"}));e.response.status=200,e.response.body=JSON.stringify({path:n})}),C.proxy=!0,C.silent=!0,C.use(p()).use(u({credentials:!0})).use(F.routes()).use(F.allowedMethods()).use(async e=>{const n=o.resolve(__dirname,"../public"),s=o.parse(e.path);if("/plugin.monkey/"!==e.path){if(""!==s.ext)return t.existsSync(`${n}${e.path}`)?void await d(e,"."+e.path,{root:n}):(e.response.status=500,void(e.response.message="file not found"));await d(e,"./index.html",{root:n})}else await d(e,"./index.html",{root:n})});let U=!1;exports.rulesServer=e=>{const s=new n;s.proxy=!0,s.silent=!0,s.use(e=>{const n=e.request.href,s=function(e){const n=new URL(e).pathname;return[...f.values()].find(e=>n.includes(e.request.url))}(n);if(s){const n=encodeURIComponent(s.filePath);e.body="* monkey://"+n}else e.body=`${n} ${n}`}),e.on("request",s.callback())},exports.server=e=>{e.on("request",(e,n)=>{const s=decodeURIComponent(e.originalReq.ruleValue),t=w(s);if(s){let s="";e.on("data",e=>{s+=e.toString("utf-8")}),e.on("end",()=>{s||(s="{}");try{const a=new URL(e.url||"","http://"+e.headers.host),o={};a.searchParams.forEach((e,n)=>{o[n]=e});const r={...JSON.parse(s),...o};!function(e,n){let s=!1;[j,J,R,E].forEach(e=>{s||(s="next"!==e(...n))})}(0,[e,n,t,r])}catch(e){n.setHeader("Content-Type","text/plain"),n.end(e.message,"utf-8"),console.log(e)}})}})},exports.uiServer=e=>{t.existsSync("./config.json")||t.writeFileSync("./config.json",JSON.stringify({root:""}),{encoding:"utf-8"}),e.on("request",C.callback()),new g.Server({port:9999}).on("connection",(async function(e){if(global.sendLog=n=>{n.date||(n.date=(new Date).valueOf()),e.send(JSON.stringify(n))},!U){const{root:e}=JSON.parse(t.readFileSync("./config.json",{encoding:"utf-8"}));if(e){try{await N(e)}catch(e){sendLog({type:"error",message:e.message,tags:["路径"]})}U=!0}}}))};
//# sourceMappingURL=whistle.monkey.cjs.production.min.js.map
