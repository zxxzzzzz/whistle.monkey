{"version":3,"file":"whistle.monkey.cjs.production.min.js","sources":["../src/file/rule.ts","../src/file/handle/invalidYaml.ts","../src/file/handle/jsFile.ts","../src/utils/ignore.ts","../src/file/handle/ruleYaml.ts","../src/file/handle/ignore.ts","../src/file/index.ts","../src/whistleServer/serverHandle/cors.ts","../src/whistleServer/serverHandle/default.ts","../src/whistleServer/serverHandle/delay.ts","../src/whistleServer/serverHandle/incomingParamsValid.ts","../src/utils/match.ts","../src/whistleServer/ui.ts","../src/whistleServer/rulesServer.ts","../src/whistleServer/server.ts"],"sourcesContent":["import { Rule } from '@/interface/rule';\r\nimport micromatch from 'micromatch';\r\n\r\nconst store = new Map<string, Rule>()\r\n\r\nexport function addRule(key: string, rule: Rule) {\r\n  if (!rule) {\r\n    throw Error('rule不能为空')\r\n  }\r\n  if (!rule?.request?.url) {\r\n    throw Error('request的url不能为空')\r\n  }\r\n  store.set(key, rule)\r\n}\r\nexport function updateRule(key: string, rule: Rule) {\r\n  if (!rule) {\r\n    throw Error('rule不能为空')\r\n  }\r\n  const tempRule = store.get(key);\r\n  if (tempRule) {\r\n    store.set(key, { ...tempRule, ...rule })\r\n    return\r\n  }\r\n  store.set(key, rule)\r\n}\r\nexport function deleteRule(key: string) {\r\n  store.delete(key)\r\n}\r\nexport function disableRule(key: string) {\r\n  const tempRule = store.get(key);\r\n  if (tempRule) {\r\n    tempRule.disabled = true\r\n  }\r\n}\r\nexport function enableRule(key: string) {\r\n  const tempRule = store.get(key);\r\n  if (tempRule) {\r\n    tempRule.disabled = false\r\n  }\r\n}\r\nexport function getRule(key: string) {\r\n  return store.get(key)\r\n}\r\n\r\nexport function getRuleByUrl(url: string) {\r\n  const urlObj = new URL(url);\r\n  const pathNames = urlObj.pathname;\r\n  return [...store.values()].find(rule => {\r\n    return pathNames.includes(rule.request.url)\r\n  })\r\n}\r\n\r\nexport function query(queryList: string[]) {\r\n  return micromatch([...store.keys()], queryList)\r\n}\r\n\r\n","import path from 'path';\r\nimport YAML from 'js-yaml';\r\nimport fs from 'fs';\r\nimport { Rule, SharedStore } from '@/interface/rule';\r\n\r\n// 把json转换为yaml。不catch错误。\r\nfunction getValidJson(content: string, defaultRule:Partial<Rule>) {\r\n  const contentWithoutDocs = content.replace(/\\/\\/[^\\n\\r]*/g, '');\r\n  const parsed = JSON.parse(contentWithoutDocs);\r\n  // 有符合定义的结构体，就不覆盖用户之前输入了\r\n  if (parsed?.request) {\r\n    return parsed;\r\n  }\r\n  // 没有符合定义的结构体，说明试复制来的后端json对象\r\n  return {\r\n    ...defaultRule,\r\n    response: {\r\n      body: parsed,\r\n    },\r\n  };\r\n}\r\n\r\n// 处理非法的yaml格式\r\nexport async function handleInvalidYaml(store: SharedStore) {\r\n  const { _path, eventName } = store\r\n  const parsedPath = path.parse(_path);\r\n  if (!['add', 'change'].includes(eventName)) return 'next';\r\n  if (parsedPath.ext !== '.yaml') return 'next';\r\n  let parsedJSON = { request: { url: path.parse(_path).name, body: {} }, response: { body: {} } } as Partial<Rule>;\r\n  const content = fs.readFileSync(_path, { encoding: 'utf-8' });\r\n  // 文件内容为空，初始化一个模板\r\n  if (content === '') {\r\n    fs.writeFileSync(_path, YAML.dump({ ...parsedJSON }), {encoding: 'utf-8'});\r\n    return\r\n  }\r\n  try {\r\n    // 如果输入的是合法json,把他变成yaml格式\r\n    const obj = getValidJson(content, parsedJSON);\r\n    fs.writeFileSync(_path, YAML.dump(obj), { encoding: 'utf-8' });\r\n    return \r\n  } catch (error) { \r\n   \r\n  }\r\n  try {\r\n    store.rule = YAML.load(content) as Rule;\r\n    return 'next';\r\n  } catch (error) {\r\n    // 如果yaml格式化失败，发送问题到log\r\n    global.sendLog({\r\n      message: `${_path}文件有格式问题<span class=\"text-pink-500\">${error.message}</span>`,\r\n      type: 'error',\r\n      tags: ['yaml', '格式'],\r\n    });\r\n  }\r\n  return;\r\n}","import { addFunction } from '@zhangxin/mock-monkey-core';\r\nimport path from 'path';\r\nexport { getRuleByUrl, getRule } from '../rule';\r\nimport { SharedStore } from '../interface';\r\n\r\nexport async function handleJSFile(store:SharedStore) {\r\n  const { _path, eventName } = store\r\n  const parsedPath = path.parse(_path);\r\n  if (parsedPath.ext !== '.js' || !['add', 'change'].includes(eventName)) return 'next';\r\n  const i18n = {\r\n    add: '添加',\r\n    change: '更新',\r\n    unlinkDir: '',\r\n    unlink: '',\r\n    addDir: '',\r\n  };\r\n  try {\r\n    if (eventName === 'change') delete require.cache[_path];\r\n    const mod = require(_path);\r\n    Object.keys(mod).forEach(key => {\r\n      addFunction(key, mod[key]);\r\n    });\r\n    global.sendLog({\r\n      message: `${i18n[eventName]}了函数<span class=\"text-pink-500\">${_path}</span>`,\r\n      type: 'success',\r\n      tags: ['添加', '函数'],\r\n    });\r\n  } catch (error) {\r\n    global.sendLog({\r\n      message: `${i18n[eventName]}函数<span class=\"text-pink-500\">${_path}</span>失败，${error.message}`,\r\n      type: 'success',\r\n      tags: ['添加', '函数'],\r\n    });\r\n  }\r\n  return;\r\n}","import fs from 'fs';\r\nimport path from 'path';\r\nimport findup from 'findup-sync';\r\n\r\nexport function getIgnoreRules(dir: string, root: string) {\r\n  const ignoreFilePath = findup('.ignore', { cwd: dir });\r\n  let ignoreRules = [] as string[];\r\n  if (ignoreFilePath) {\r\n    ignoreRules = fs\r\n      .readFileSync(ignoreFilePath, { encoding: 'utf-8' })\r\n      .split('\\n')\r\n      .filter(text => !text.startsWith('// '))\r\n      .map(text => {\r\n        const prefixPath = `${path.parse(ignoreFilePath.replace(/[\\\\]/g, '/')).dir\r\n          }`.replace(root, '**');\r\n        return `${prefixPath}/${text.replace(/[\\s]*/g, '')}`;\r\n      });\r\n  }\r\n  return ignoreRules;\r\n}","import path from 'path';\r\nimport { addRule, deleteRule, query, disableRule, updateRule } from '../rule';\r\nimport micromatch from 'micromatch';\r\nimport { Rule, SharedStore } from '@/interface/rule';\r\nimport { getIgnoreRules } from '@/utils/ignore';\r\n\r\n\r\nexport async function handleYAMLFile(store: SharedStore) {\r\n  const { _path, eventName, root } = store\r\n  const parsedPath = path.parse(_path);\r\n  if (parsedPath.ext !== '.yaml') return 'next';\r\n  if (eventName === 'add') {\r\n    try {\r\n      addRule(_path, { ...store.rule as Rule, filePath: _path, disabled: false })\r\n      const ignoreRules = getIgnoreRules(parsedPath.dir, root);\r\n      if (micromatch.isMatch(_path, ignoreRules)) {\r\n        disableRule(_path);\r\n        global.sendLog({ message: `禁用了模板<span class=\"text-pink-500\">${_path}</span>`, type: 'warning', tags: ['禁用'] });\r\n        return;\r\n      }\r\n      global.sendLog({ message: `添加了模板<span class=\"text-pink-500\">${_path}</span>`, type: 'success', tags: ['添加'] });\r\n    } catch (error) {\r\n      global.sendLog({ message: `添加模板<span class=\"text-pink-500\">${_path}</span>失败,${error.message}`, type: 'error' });\r\n    }\r\n  }\r\n  if (eventName === 'change') {\r\n    try {\r\n      updateRule(_path, store.rule as Rule);\r\n      global.sendLog({ message: `更新了模板<span class=\"text-pink-500\">${_path}</span>`, type: 'success', tags: ['更新'] });\r\n    } catch (error) {\r\n      global.sendLog({ message: `更新模板<span class=\"text-pink-500\">${_path}</span>失败`, type: 'error' });\r\n    }\r\n  }\r\n  if (eventName === 'unlinkDir') {\r\n    query([`${_path}/*`]).forEach(filePath => {\r\n      deleteRule(filePath);\r\n      global.sendLog({ message: `删除了模板<span class=\"text-pink-500\">${_path}</span>`, type: 'warning', tags: ['禁用'] });\r\n    });\r\n  }\r\n  if (eventName === 'unlink') {\r\n    deleteRule(_path);\r\n    global.sendLog({ message: `删除了模板<span class=\"text-pink-500\">${_path}</span>`, type: 'success', tags: ['删除'] });\r\n  }\r\n  return;\r\n}","import path from 'path';\r\nimport { getRule, query, disableRule, enableRule } from '@/file/rule';\r\nimport micromatch from 'micromatch';\r\nimport { SharedStore } from '@/interface/rule';\r\nimport { getIgnoreRules } from '@/utils/ignore';\r\n\r\n\r\nexport async function handleIgnore(store: SharedStore) {\r\n  const { _path, root } = store\r\n  const parsedPath = path.parse(_path);\r\n  if (parsedPath.name === '.ignore') {\r\n    const ignoreRules = getIgnoreRules(parsedPath.dir, root);\r\n    query(['**']).forEach(filePath => {\r\n      const rule = getRule(filePath);\r\n      if (\r\n        rule?.disabled === true &&\r\n        !micromatch.isMatch(filePath, ignoreRules)\r\n      ) {\r\n        enableRule(filePath);\r\n        global.sendLog({\r\n          message: `启用了模板<span class=\"text-pink-500\">${filePath}</span>`,\r\n          type: 'success',\r\n          tags: ['启用'],\r\n        });\r\n        return;\r\n      }\r\n      if (\r\n        rule?.disabled === false &&\r\n        micromatch.isMatch(filePath, ignoreRules)\r\n      ) {\r\n        disableRule(filePath);\r\n        global.sendLog({\r\n          message: `禁用了模板<span class=\"text-pink-500\">${filePath}</span>`,\r\n          type: 'warning',\r\n          tags: ['禁用'],\r\n        });\r\n      }\r\n    });\r\n  }\r\n}","import chokidar from 'chokidar';\r\nimport fs from 'fs';\r\nexport { getRuleByUrl, getRule } from '@/file/rule';\r\nimport { SharedStore } from '@/interface/rule';\r\nimport { handleInvalidYaml } from '@/file/handle/invalidYaml';\r\nimport { handleJSFile } from '@/file/handle/jsFile';\r\nimport { handleYAMLFile } from '@/file/handle/ruleYaml';\r\nimport { handleIgnore } from '@/file/handle/ignore';\r\n\r\n\r\nlet currentWatcher: chokidar.FSWatcher;\r\nexport async function watch(watchPath: string) {\r\n  if (currentWatcher) {\r\n    await currentWatcher.close();\r\n  }\r\n  if (!fs.existsSync(watchPath)) throw Error('path not exist');\r\n  currentWatcher = chokidar.watch(watchPath).on('all', (eventName, _path) => {\r\n    queue([handleInvalidYaml, handleJSFile, handleYAMLFile, handleIgnore], {\r\n      eventName,\r\n      _path: _path.replace(/[\\\\]/g, '/'),\r\n      root: watchPath.replace(/[\\\\]/g, '/'),\r\n      content: ''\r\n    });\r\n  });\r\n}\r\n\r\nasync function queue(\r\n  funcs: ((store: SharedStore) => any)[],\r\n  params: SharedStore\r\n) {\r\n  if (!funcs.length) return;\r\n  const store: SharedStore = params;\r\n  for (const func of funcs) {\r\n    const flag = await func(store);\r\n    if (flag !== 'next') {\r\n      break;\r\n    }\r\n  }\r\n}\r\n","import http from 'http';\r\nimport { Request } from '@/interface/request';\r\n\r\n// 跨域设置\r\nexport function handleCors(\r\n  request: http.IncomingMessage & Request,\r\n  response: http.OutgoingMessage\r\n) {\r\n  response.setHeader('Access-Control-Allow-Credentials', 'true');\r\n  response.setHeader(\r\n    'Access-Control-Allow-Origin',\r\n    request.headers['origin'] || ''\r\n  );\r\n  response.setHeader('Content-Type', 'application/json');\r\n  return 'next';\r\n}","import { generate } from '@zhangxin/mock-monkey-core';\r\nimport { Rule } from '@/interface/rule';\r\nimport http from 'http';\r\nimport { Request } from '@/interface/request';\r\n\r\n// 兜底方案\r\nexport function handleDefault(\r\n  request: http.IncomingMessage & Request,\r\n  response: http.OutgoingMessage,\r\n  rule: Rule,\r\n  requestData: any\r\n) {\r\n  const filePath = decodeURIComponent(request.originalReq.ruleValue);\r\n  const body = generate(rule?.response?.body, requestData);\r\n  const url = new URL(request.url || '', `http://${request.headers.host}`);\r\n  response.end(JSON.stringify(body), 'utf-8');\r\n  global.sendLog({\r\n    type: 'success',\r\n    message: `请求<span class=\"text-purple-500\">${url.pathname}</span>命中文件<span class=\"text-pink-500\">${filePath}</span>`,\r\n    tags: ['命中'],\r\n  });\r\n}","import { generate } from '@zhangxin/mock-monkey-core';\r\nimport { Rule } from '@/interface/rule';\r\nimport http from 'http';\r\nimport { Request } from '@/interface/request';\r\n\r\n// 延迟功能\r\nexport function handleDelay(\r\n  request: http.IncomingMessage & Request,\r\n  response: http.OutgoingMessage,\r\n  rule: Rule,\r\n  requestData: any\r\n) {\r\n  if (typeof rule?.delay === 'number') {\r\n    const body = generate(rule?.response?.body, requestData);\r\n    const url = new URL(request.url || '', `http://${request.headers.host}`);\r\n    const filePath = decodeURIComponent(request.originalReq.ruleValue);\r\n    setTimeout(() => {\r\n      response.end(JSON.stringify(body), 'utf-8');\r\n      global.sendLog({\r\n        type: 'success',\r\n        message: `请求<span class=\"text-purple-500\">${url.pathname}\r\n          </span>延迟${rule.delay}ms, 命中文件<span class=\"text-pink-500\">${filePath}</span>`,\r\n        tags: ['命中'],\r\n      });\r\n    }, rule.delay);\r\n    return;\r\n  }\r\n  return 'next';\r\n}","import { Rule } from '@/interface/rule';\r\nimport http from 'http';\r\nimport { isValid } from '@/utils/match';\r\nimport { Request } from '@/interface/request';\r\n\r\n// 对入参的验证。\r\nexport function handleRequestDataMatch(\r\n  request: http.IncomingMessage & Request,\r\n  response: http.ServerResponse,\r\n  rule: Rule,\r\n  requestData: any\r\n) {\r\n  try {\r\n    isValid(requestData, rule?.request?.body, requestData);\r\n  } catch (error) {\r\n    response.statusCode = 400;\r\n    response.statusMessage = error.message;\r\n    response.end(\r\n      JSON.stringify({ code: 400, message: error.message }),\r\n      'utf-8'\r\n    );\r\n    const filePath = decodeURIComponent(request.originalReq.ruleValue);\r\n    const url = new URL(request.url || '', `http://${request.headers.host}`);\r\n    global.sendLog({\r\n      type: 'error',\r\n      message: `请求<span class=\"text-purple-500\">${url.pathname}</span>命中文件<span class=\"text-pink-500\">${filePath}</span>,但是参数有问题`,\r\n      tags: ['命中','入参'],\r\n    });\r\n    return;\r\n  }\r\n  return 'next';\r\n}","import { getValueByStatement } from '@zhangxin/mock-monkey-core';\r\n\r\ntype cMap = { [key: string]: any }\r\n\r\nfunction isEqual(statement: string, val: any, scope: any) {\r\n  const result = getValueByStatement(statement, scope);\r\n  if (typeof result === 'function') {\r\n    result(val);\r\n  }\r\n  return val === result;\r\n}\r\n\r\n// 根据多数接口调查，request body一般就一层结构，所以做个简单的，只遍历第一层的\r\nexport function isValid(\r\n  father: unknown,\r\n  child: unknown,\r\n  scope: unknown\r\n): boolean {\r\n  if (child == null) {\r\n    return true;\r\n  }\r\n  if (father == null) {\r\n    throw Error('入参不存在，但是却配置了入参验证, 所以请求失败');\r\n  }\r\n  Object.keys(child as cMap).forEach(key => {\r\n    const cv = (child as cMap)[key];\r\n    const fv = (father as cMap)[key];\r\n    const bo = isEqual(cv, fv, scope);\r\n    if (bo === false) {\r\n      throw Error(`入参字段 ${key} 不符合判定规则`);\r\n    }\r\n  });\r\n  return true\r\n}\r\n","import Koa from 'koa';\r\nimport Router from '@koa/router';\r\n// @ts-ignore\r\nimport cors from '@koa/cors';\r\nimport { watch } from '../file/index';\r\nimport body from 'koa-body';\r\nimport send from 'koa-send';\r\nimport path from 'path';\r\nimport fs from 'fs';\r\n// @ts-ignore\r\nimport { Server } from 'ws';\r\nimport { Log } from '../interface/log';\r\n\r\nconst app = new Koa();\r\nconst router = new Router();\r\n\r\nrouter.post('/cgi-bin/root', async ctx => {\r\n  const body = ctx.request.body;\r\n  if (!body.path) {\r\n    ctx.response.status = 500;\r\n    ctx.response.message = 'do not find property \"path\"';\r\n    return;\r\n  }\r\n  try {\r\n    const config = JSON.parse(\r\n      fs.readFileSync('./config.json', { encoding: 'utf-8' })\r\n    );\r\n    config.root = body.path;\r\n    fs.writeFileSync('./config.json', JSON.stringify(config), {\r\n      encoding: 'utf-8',\r\n    });\r\n    await watch(body.path);\r\n    ctx.response.status = 200;\r\n    ctx.response.body = JSON.stringify({ path: body.path });\r\n  } catch (error) {\r\n    ctx.response.status = 500;\r\n    ctx.response.message = error.message;\r\n  }\r\n});\r\nrouter.get('/cgi-bin/root', async ctx => {\r\n  const { root } = JSON.parse(\r\n    fs.readFileSync('./config.json', { encoding: 'utf-8' })\r\n  );\r\n  ctx.response.status = 200;\r\n  ctx.response.body = JSON.stringify({ path: root });\r\n});\r\n\r\napp.proxy = true;\r\napp.silent = true;\r\napp\r\n  .use(body())\r\n  .use(cors({ credentials: true }))\r\n  .use(router.routes())\r\n  .use(router.allowedMethods())\r\n  .use(async ctx => {\r\n    const root = path.resolve(__dirname, '../public');\r\n    const parsedPath = path.parse(ctx.path);\r\n    if (ctx.path === '/plugin.monkey/') {\r\n      await send(ctx, './index.html', { root });\r\n      return;\r\n    }\r\n    if (parsedPath.ext !== '') {\r\n      const isExist = fs.existsSync(`${root}${ctx.path}`);\r\n      if (isExist) {\r\n        await send(ctx, `.${ctx.path}`, { root });\r\n        return;\r\n      }\r\n      ctx.response.status = 500;\r\n      ctx.response.message = 'file not found';\r\n      return;\r\n    }\r\n    await send(ctx, './index.html', { root });\r\n  });\r\n\r\nlet hasInit = false;\r\nexport default (server: any) => {\r\n  if (!fs.existsSync('./config.json')) {\r\n    fs.writeFileSync('./config.json', JSON.stringify({ root: '' }), {\r\n      encoding: 'utf-8',\r\n    });\r\n  }\r\n  server.on('request', app.callback());\r\n  const wss = new Server({ port: 9999 });\r\n  wss.on('connection', async function(_ws: any) {\r\n    global.sendLog = (log: Log) => {\r\n      if(!log.date){\r\n        log.date = new Date().valueOf()\r\n      }\r\n      _ws.send(JSON.stringify(log));\r\n    };\r\n    if (!hasInit) {\r\n      const { root } = JSON.parse(\r\n        fs.readFileSync('./config.json', { encoding: 'utf-8' })\r\n      );\r\n      if (root) {\r\n        try {\r\n          await watch(root);\r\n        } catch (error) {\r\n          sendLog({\r\n            type: 'error',\r\n            message: error.message,\r\n            tags: ['路径'],\r\n          });\r\n        }\r\n        hasInit = true;\r\n      }\r\n    }\r\n  });\r\n};\r\n","import Koa from 'koa';\r\nimport {getRuleByUrl} from '../file/index';\r\n\r\nexport default (server:any) => {\r\n  const app = new Koa();\r\n  app.proxy = true;\r\n  app.silent = true;\r\n  app.use((ctx) => {\r\n    const href = ctx.request.href\r\n    const rule = getRuleByUrl(href)\r\n    if(rule){\r\n      const sendStr = encodeURIComponent(rule.filePath)\r\n      ctx.body = `* monkey://${sendStr}`\r\n    } else {\r\n      ctx.body = `${href} ${href}`\r\n    }\r\n  })\r\n  server.on('request', app.callback());\r\n};\r\n","import { getRule } from '@/file/rule';\r\nimport http from 'http';\r\nimport { Request } from '@/interface/request';\r\nimport {handleCors} from '@/whistleServer/serverHandle/cors';\r\nimport {handleDefault} from '@/whistleServer/serverHandle/default';\r\nimport {handleDelay} from '@/whistleServer/serverHandle/delay';\r\nimport {handleRequestDataMatch} from '@/whistleServer/serverHandle/incomingParamsValid';\r\n\r\n\r\nconst NEXT = 'next';\r\n\r\nexport default (server: http.Server) => {\r\n  server.on(\r\n    'request',\r\n    (req: http.IncomingMessage & Request, res: http.OutgoingMessage) => {\r\n      const filePath = decodeURIComponent(req.originalReq.ruleValue);\r\n      const rule = getRule(filePath);\r\n      if (filePath) {\r\n        let data = '';\r\n        req.on('data', (chunk: any) => {\r\n          data += chunk.toString('utf-8');\r\n        });\r\n        req.on('end', () => {\r\n          if (!data) {\r\n            data = '{}';\r\n          }\r\n          try {\r\n            const url = new URL(req.url || '', `http://${req.headers.host}`);\r\n            const queryData: { [key: string]: any } = {};\r\n            url.searchParams.forEach((val, key) => {\r\n              queryData[key] = val;\r\n            });\r\n            const requestData = { ...JSON.parse(data), ...queryData };\r\n            queue(\r\n              [handleCors, handleRequestDataMatch, handleDelay, handleDefault],\r\n              [req, res, rule, requestData]\r\n            );\r\n          } catch (error) {\r\n            res.setHeader('Content-Type', 'text/plain');\r\n            res.end(error.message, 'utf-8');\r\n            console.log(error);\r\n          }\r\n        });\r\n      }\r\n    }\r\n  );\r\n};\r\n\r\nfunction queue(items: Function[], params: unknown[]) {\r\n  let isBreak = false;\r\n  items.forEach(func => {\r\n    if (!isBreak) {\r\n      isBreak = func(...params) === NEXT ? false : true;\r\n    }\r\n  });\r\n}\r\n"],"names":["store","Map","addRule","key","rule","Error","request","_rule$request","url","set","updateRule","tempRule","get","deleteRule","delete","disableRule","disabled","enableRule","getRule","query","queryList","micromatch","keys","async","handleInvalidYaml","_path","eventName","parsedPath","path","parse","includes","ext","parsedJSON","name","body","response","content","fs","readFileSync","encoding","obj","defaultRule","contentWithoutDocs","replace","parsed","JSON","getValidJson","writeFileSync","YAML","dump","error","load","global","sendLog","message","type","tags","handleJSFile","i18n","add","change","unlinkDir","unlink","addDir","require","cache","mod","Object","forEach","addFunction","getIgnoreRules","dir","root","ignoreFilePath","findup","cwd","ignoreRules","split","filter","text","startsWith","map","handleYAMLFile","filePath","isMatch","handleIgnore","currentWatcher","watch","watchPath","close","existsSync","chokidar","on","funcs","params","length","func","queue","handleCors","setHeader","headers","handleDefault","requestData","decodeURIComponent","originalReq","ruleValue","generate","_rule$response","URL","host","end","stringify","pathname","handleDelay","delay","setTimeout","handleRequestDataMatch","father","child","scope","statement","val","result","getValueByStatement","isEqual","isValid","statusCode","statusMessage","code","app","Koa","router","Router","post","ctx","status","config","proxy","silent","use","cors","credentials","routes","allowedMethods","resolve","__dirname","send","hasInit","server","href","pathNames","values","find","getRuleByUrl","sendStr","encodeURIComponent","callback","req","res","data","chunk","toString","queryData","searchParams","items","isBreak","console","log","Server","port","_ws","date","Date","valueOf"],"mappings":"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"}