{"version":3,"file":"mock-monkey-core.cjs.production.min.js","sources":["../src/utils/is.ts","../src/reserve/index.ts","../src/scope/index.ts","../src/generate/statement.ts","../src/generate/index.ts"],"sourcesContent":["import _ from 'lodash';\r\n\r\nexport function isDateString(str = '') {\r\n  if(typeof str !== 'string'){\r\n    return false\r\n  }\r\n  const [year, month, day] = str.split('-');\r\n  if (Number.isNaN(_.toNumber(year))) {\r\n    return false;\r\n  }\r\n  if (Number.isNaN(_.toNumber(month))) {\r\n    return false;\r\n  }\r\n  if (Number.isNaN(_.toNumber(day))) {\r\n    return false;\r\n  }\r\n  if (_.toNumber(month) > 12 || _.toNumber(month) < 1) {\r\n    return false;\r\n  }\r\n  if (_.toNumber(day) > 31 || _.toNumber(day) < 1) {\r\n    return false;\r\n  }\r\n  return true;\r\n}","import { Obj } from 'generate/interface';\r\nimport R from 'ramda';\r\nimport _ from 'lodash';\r\nimport {isDateString} from '../utils/is';\r\nimport dayjs from 'dayjs';\r\nimport faker from 'faker';\r\nimport isBetween from 'dayjs/plugin/isBetween';\r\ndayjs.extend(isBetween);\r\n\r\nconst additionalFunction = {} as Obj<Function>\r\nexport function addFunction(key:string,value:Function){\r\n  additionalFunction[key] = value\r\n}\r\n\r\nexport function deleteFunction(){\r\n  \r\n}\r\n\r\naddFunction('random', _.random)\r\n\r\naddFunction('fake', (strings:string[])=>{\r\n  return faker.fake(strings[0])\r\n})\r\naddFunction('bt10', ()=>{\r\n  return ()=>true\r\n})\r\n\r\naddFunction('between',(...params:any[]) => {\r\n  const [p1,p2] = params\r\n  if(isDateString(p1) && isDateString(p2)){\r\n    return (value:string)=>{\r\n      return dayjs(value).isBetween(p1,p2)\r\n    }\r\n  }\r\n  if(typeof p1 === 'number' && typeof p2 === 'number'){\r\n    return (value:number|string) => {\r\n      return value > p1 && value <= p2\r\n    }\r\n  }\r\n  return ()=>false\r\n})\r\n\r\nexport function getReserveFunc(){\r\n  return {R, _, dayjs, faker, ...additionalFunction, }\r\n}","import {Obj} from 'generate/interface';\r\n\r\nconst scope = new Map<string,any>()\r\nexport function addValue(key:string,value:any){\r\n  scope.set(key,value)\r\n}\r\nexport function deleteValue(key:string){\r\n  scope.delete(key)\r\n}\r\nexport function clearScope(){\r\n  scope.clear()\r\n}\r\nexport function addScope(tScope:Obj<any> ={}){\r\n  Object.keys(tScope).forEach(key => scope.set(key,tScope[key]))\r\n}\r\n\r\nexport function deleteScope(tScope:Obj<any> ={}){\r\n  Object.keys(tScope).forEach(key => scope.delete(key))\r\n}\r\n\r\nexport function getScopeValue(key:string){\r\n  return scope.get(key)\r\n}\r\nexport function getScope(){\r\n  return [...scope.keys()].reduce((re, key) =>({\r\n    ...re,\r\n    [key]:scope.get(key)\r\n  }),{})\r\n}","import { Obj } from '@/generate/interface';\r\nimport R from 'ramda';\r\nimport {getReserveFunc} from '../reserve';\r\nimport {getScope} from '../scope';\r\n\r\nfunction getValueByStatement({scope,reserveFunctions,statement}:{scope:Obj<any>,reserveFunctions:Obj<any>,statement:string}){\r\n  const combine = {...scope,...reserveFunctions}\r\n  try {\r\n    const func = Function(...Object.keys(combine),`return ${statement}`)\r\n    return func(...R.values(combine))\r\n  } catch (error) {\r\n    return statement\r\n  }\r\n}\r\n\r\nexport function getValue(statement:string, scope?:Obj<any>){\r\n  return getValueByStatement({scope:scope || getScope(),reserveFunctions:getReserveFunc(),statement})\r\n}","import { Obj, Body } from 'generate/interface';\r\nimport { getValue } from './statement';\r\nimport { addScope, addValue, deleteScope } from '../scope';\r\nimport R from 'ramda';\r\n\r\n// a<2>  => a\r\nfunction getPureKey(key = '') {\r\n  return key.replace(/<([\\s\\S]*)>/g, '')\r\n}\r\n\r\n// 获取asd<@random(1,3)>  这种数据定义的数组长度\r\nfunction getKeyOption(key = '') {\r\n  if (/[a-zA-Z0-9]+[<][\\s\\S]*[>]/.test(key)) {\r\n    const statement = key.slice(key.indexOf('<') + 1, -1)\r\n    const value = getValue(statement);\r\n    if (value === false) {\r\n      return { length: 0, exist: value === false ? false : true };\r\n    }\r\n    const tValue = parseInt(value, 10)\r\n    if (Number.isNaN(tValue)) {\r\n      return { length: 0, exist: true }\r\n    } else {\r\n      return { length: tValue, exist: true };\r\n    }\r\n  }\r\n  return { length: 0, exist: true }\r\n}\r\n\r\n// a:[1,2,3] 这种情况的处理\r\nfunction generateArray(list: Array<any>): any {\r\n  return list.map((elem) => {\r\n    if (Array.isArray(elem)) {\r\n      return generateArray(elem);\r\n    }\r\n    if (elem.constructor === Object) {\r\n      return generateObject(elem);\r\n    }\r\n    // 处理原始类型\r\n    return getValue(elem);\r\n  });\r\n}\r\n\r\n// 根据配置生成mock的数据\r\nfunction generateObject(result: Obj<any>) {\r\n  const keys = Object.keys(result);\r\n  return keys.reduce((re, key) => {\r\n    const value = result[key];\r\n    // tKey是去除参数的可读key   list<@number>  =>  list\r\n    const objectValue = generateByKey({ key, value });\r\n    const tKey = getPureKey(key);\r\n    // 如果生成的值是undefined,直接忽略这个字段\r\n    if (objectValue === undefined) {\r\n      return re\r\n    }\r\n    // 相同的key要合并成数组\r\n    if (!re[tKey]) {\r\n      re[tKey] = objectValue;\r\n    } else {\r\n      re[tKey] = [...[].concat(re[tKey], ...[].concat(objectValue))];\r\n    }\r\n    return re;\r\n  }, {} as Obj<any>);\r\n}\r\n\r\n// a<10>:xxx  这种情况的处理\r\n// value可能是个variable也可能是个map\r\n// 通过key的配置生成单独的obj\r\nfunction generateByKey({ key, value }: { key: string, value: any }) {\r\n  const option = getKeyOption(key);\r\n  const tKey = getPureKey(key)\r\n  // 该字段不需要\r\n  if (!option.exist) {\r\n    return undefined\r\n  }\r\n  // 不是数组，即普通对象\r\n  if (option.length === 0) {\r\n    if (value == null) {\r\n      return value\r\n    }\r\n    if (value.constructor === Object) {\r\n      return generateObject(value);\r\n    }\r\n    if (Array.isArray(value)) {\r\n      return generateArray(value);\r\n    }\r\n    const tValue = getValue(value)\r\n    addValue(tKey, tValue)\r\n    return tValue;\r\n  }\r\n  // 是数组\r\n  return R.range(0, option.length).map((index) => {\r\n    addValue('index', index);\r\n    if (value == null) {\r\n      return value\r\n    }\r\n    if (value.constructor === Object) {\r\n      return generateObject(value);\r\n    }\r\n    if (Array.isArray(value)) {\r\n      return generateArray(value);\r\n    }\r\n    const tValue = getValue(value)\r\n    addValue(tKey, tValue)\r\n    return tValue;\r\n  });\r\n}\r\n\r\n\r\n\r\nexport function generate(body: Body, scope: Obj<any> = {}) {\r\n  if (body) {\r\n    addScope(scope)\r\n    const re = generateObject(body)\r\n    deleteScope(scope)\r\n    return re\r\n  }\r\n  return undefined\r\n}\r\n\r\n\r\n\r\n"],"names":["isDateString","str","year","month","day","split","Number","isNaN","_","toNumber","dayjs","extend","isBetween","additionalFunction","addFunction","key","value","random","strings","faker","fake","params","p1","p2","scope","Map","addValue","set","addScope","tScope","Object","keys","forEach","deleteScope","delete","getScope","reduce","re","get","getValue","statement","reserveFunctions","combine","Function","func","R","values","error","getValueByStatement","getPureKey","replace","generateArray","list","map","elem","Array","isArray","constructor","generateObject","result","objectValue","option","test","slice","indexOf","length","exist","tValue","parseInt","getKeyOption","tKey","range","index","generateByKey","undefined","concat","body"],"mappings":"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"}